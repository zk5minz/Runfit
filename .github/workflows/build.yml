name: Build RunFit Android App
on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: ☕ Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: 🤖 Setup Android SDK
      uses: android-actions/setup-android@v3
      
    - name: 📱 Accept Android SDK Licenses
      run: yes | sdkmanager --licenses
      
    - name: 🔧 Install Cordova CLI
      run: npm install -g cordova@latest
      
    - name: 🏗️ Check and Initialize Cordova Project
      run: |
        echo "=== 프로젝트 구조 확인 ==="
        ls -la
        
        if [ ! -f "config.xml" ]; then
          echo "config.xml이 없습니다. Cordova 프로젝트를 초기화합니다."
          cordova create temp_app com.runfit.app RunFit
          cp -r temp_app/* .
          rm -rf temp_app
        else
          echo "기존 Cordova 프로젝트를 사용합니다."
        fi
        
    - name: 📦 Install Dependencies
      run: |
        if [ -f "package.json" ]; then
          npm install
        else
          echo "package.json이 없습니다. 건너뜁니다."
        fi
        
    - name: 🏗️ Add Android Platform
      run: |
        if ! cordova platform list | grep -q "android"; then
          cordova platform add android
        else
          echo "Android 플랫폼이 이미 추가되어 있습니다."
        fi
      
    - name: 🔌 Install Essential Plugins
      run: |
        cordova plugin add cordova-plugin-whitelist || echo "whitelist 플러그인 설치 실패"
        cordova plugin add cordova-plugin-device || echo "device 플러그인 설치 실패"
        cordova plugin add cordova-plugin-statusbar || echo "statusbar 플러그인 설치 실패"
        
    - name: 🔨 Build Debug APK
      run: |
        echo "Debug APK 빌드 시작..."
        cordova build android --debug
        
    - name: 🔨 Build Release APK
      run: |
        echo "Release APK 빌드 시작..."
        cordova build android --release
        
    - name: 📁 Find and List APK Files
      run: |
        echo "=== APK 파일 검색 ==="
        find . -name "*.apk" -type f
        
    - name: 📤 Upload Debug APK
      uses: actions/upload-artifact@v4
      with:
        name: RunFit-debug-apk
        path: |
          platforms/android/app/build/outputs/apk/debug/*.apk
        retention-days: 30
        if-no-files-found: warn
        
    - name: 📤 Upload Release APK
      uses: actions/upload-artifact@v4
      with:
        name: RunFit-release-apk
        path: |
          platforms/android/app/build/outputs/apk/release/*.apk
        retention-days: 30
        if-no-files-found: warn
        
    - name: 📋 Show Build Results
      run: |
        echo "✅ 빌드 완료!"
        echo "🗓️ 빌드 시간: $(date)"
        echo ""
        echo "📁 생성된 APK 파일들:"
        find . -name "*.apk" -type f -exec ls -lh {} \;
